//
//  NewsItemGenerator.swift
//  SilverFox-gen
//
//  Created by Louis D'hauwe on 28/05/2017.
//
//

import Foundation
import SwiftMarkdown
import Files

extension NewsItem {
	
	var tileHtml: String {
		
		var html = ""

		// TODO: refactor indentation
		
		html += "<!-- Auto generated by Silver Fox Gen -->"
		html += "\n<a href=\"\(link)\">"
		html += "\n\t<div class=\"tile newsitem\">"
		html += "\n\t\t<span class=\"newsitem-wrapper\">"
		html += "\n\t\t\t<h3>\(title)</h3>"
		
		html += "\n\t\t\t<p class=\"newsitem-metadata-date\">\(formattedDate)</p>"
		html += "\n\t\t\t<p class=\"newsitem-metadata-author\">by \(author)</p>"
		
		html += "\n\t\t</span>"
		html += "\n\t\t<div>"
		html += "\n\t\t\t<p>Read</p>"
		html += "\n\t\t</div>"
		html += "\n\t</div>"
		html += "\n</a>"
		
		return html
	}
	
}

extension NewsItem {
	
	init?(file: File) throws {
		
		let fileName = file.name
		
		print("Starting \(fileName) generating ...")
		
		let dateFormat = "yyyy-MM-dd"
		
		guard fileName.characters.count > dateFormat.characters.count else {
			runtimeError("Invalid date format in \(file.name) file name, please provide in format: \"\(dateFormat)\"")
		}
		
		let dateString = fileName.substring(to: fileName.index(fileName.startIndex, offsetBy: dateFormat.characters.count))
		
		let formatter = DateFormatter()
		formatter.dateFormat = dateFormat
		
		guard let date = formatter.date(from: dateString) else {
			runtimeError("Invalid date format in \(file.name) file name, please provide in format: \"\(dateFormat)\"")
		}
		
		let markdown = try file.readAsString()
		
		guard markdown.hasPrefix("---") else {
			runtimeError("Make sure to add \"---\" info at the top of \(file.name)")
		}
		
		guard let infoSlice = markdown.slice(from: "---", to: "---") else {
			runtimeError("Make sure to add \"---\" info at the top of \(file.name)")
		}
		
		let articleInfos = infoSlice.components(separatedBy: "\n")
		
		guard let infoDict = articleInfos.dictionary(separatedBy: ": ") else {
			runtimeError("Could not initialize \(file.nameExcludingExtension)")
		}
		
		self.init(infoDict: infoDict, date: date)
		
	}
	
}
